@page "/login"
@using System.ComponentModel.DataAnnotations
@using Domain.Entity
@using Domain.Interface
@using Microsoft.AspNetCore.Identity
@using MudBlazor;

@inject IAccountService AccountService;
@inject NavigationManager NavigationManager;
@inject SignInManager<User> SignInManager;

<h1>Login</h1>
<div class="row">
    <div class="col-md-4">
        <MudAlert Severity="Severity.Success" Variant="Variant.Filled">The reactor is running at optimum temperature</MudAlert>
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                <DataAnnotationsValidator />
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputCheckbox @bind-Value="Input.Remember" />
                    Remember me
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
            </EditForm>
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     await AccountService.RegisterUser(new Domain.DataTransferObject.Request.RegisterUserRequest
    //     {
    //         Email = "abronal123@gmail.com",
    //         Role = "Admin"
    //     }

    //     );

    // }

    private async Task OnLogin()
    {
        var verify = await AccountService.VerifyUser(Input.Email, Input.Password);
        if (!verify.IsSuccess)
        {
            // Handle login failure, e.g., show an error message
            return;
        }
        {
        }
        await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.Remember, false);

        NavigationManager.NavigateTo("/");
       
    }
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool Remember { get; set; }

    }
}
